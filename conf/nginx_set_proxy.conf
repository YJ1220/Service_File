
#反向代理中，设置上传文件的最大值
client_max_body_size 50m;
#缓冲区代理缓冲客户端请求的最大字节数
client_body_buffer_size 512k;
#设置请求头的超时时间
client_header_timeout 3m;
#设置请求体的超时时间
client_body_timeout 3m;
#设置连接后端服务器超时时间
proxy_connect_timeout 60;
#设置nginx会等待多长时间来获得请求的响应.这个时间不是获得整个response的时间,而是两次reading操作的时间。
proxy_read_timeout 60;
#发送请求给upstream服务器的超时时间;超时设置不是为了整个发送期间,而是在两次write操作期间.如果超时后,upstream没有收到新的数据;nginx会关闭连接
proxy_send_timeout 60;
#设置代理服务（nginx）保存用户头信息的缓冲区大小
proxy_buffer_size 32k;
#proxy_buffers缓冲区，网页平均在64k下，可以这样设置
proxy_buffers 4 64k; 
#增加系统繁忙时可申请的proxy_buffers大小
proxy_busy_buffers_size 128k;
#增加proxy缓存临时文件的大小
proxy_temp_file_write_size 128k; 
#Fast_cgi缓存优化

#缓存路径文件，目录结构等级，关键字区域实际和非活动时间
fastcgi_cache_path /usr/local/nginx/fastcgi_cache levels=1:2 keys_zone=TEST:10m inactive=5m;
#连接到后端fastcgi超时时间
fastcgi_connect_timeout 120s;
#向fastcgi请求超时时间(这个指定值已经完成两次握手后向fastcgi传送请求的超时时间)
fastcgi_send_timeout 60s;
#接收fastcgi应答超时时间，同理也是2次握手后
fastcgi_buffer_size 8k;
#指定本地需要多少和多大的缓冲区来缓冲fastcgi应答请求，假设一个php或java脚本所产生页面大小为256kb,那么会为其分配4个64kb的缓冲来缓存；若页面大于256kb,那么大于的256kb的部分会缓存到fastcgi_temp指定路径中，这并非是个好办法，内存数据处理快于硬盘，一般该值应该为站点中php/java脚本所产生页面大小中间值，如果站点大部分脚本所产生的页面大小为256kb，那么可把值设置为16 16k,4 64k等
fastcgi_buffers 4 64k;
#默认值是fastcgi_buffer的2倍
fastcgi_busy_buffers_size 128k;
#写入缓存文件使用多大的数据块，默认值是fastcgi_buffer的2倍
fastcgi_temp_file_write_size 128k;
#开启fastcgi缓存并为其指定为TEST名称，降低cpu负载,防止502错误发生.
fastcgi_cache TEST;
#配置缓存键
fastcgi_cache_key 127.0.0.1:9000$request_uri;
#应答代码缓存时间，200和302应答缓存为1个小时，301一天,其他1分钟
fastcgi_cache_valid 200 302 1h;
fastcgi_cache_valid 301 1d;
fastcgi_cache_valid any 1m;
