user nginx nginx;
#user  nobody;
worker_processes  auto;
worker_rlimit_nofile 102400;
error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    use epoll;
    multi_accept on;
    worker_connections  102400;
}


http {

    include       mime.types;
    default_type  application/octet-stream;

    #静态文件缓存配置  支持http server location
    #open_file_cache打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉。
    #open_file_cache_valid 在open_file_cache中指定检测正确信息的间隔时间。
    #open_file_cache_min_uses 定义了open_file_cache中指令参数不活动时间期间里最小的文件数。
    #open_file_cache_errors指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。我们也包括了服务器模块，这些是在不同文件中定义的。如果你的服务器模块不在这些位置，你就得修改这一行来指定正确的位置。
    open_file_cache max=102400 inactive=20s;
    open_file_cache_min_uses 2;
    open_file_cache_valid 30s;
    open_file_cache_errors on;
    #日志
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    
    #server_tokens 并不会让nginx执行的速度更快，但它可以关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的。
    server_tokens off;
    sendfile        on;
    #tcp_nopush 告诉nginx在一个数据包里发送所有头文件，而不一个接一个的发送
    tcp_nopush on;
    #keepalive_timeout  0;
    keepalive_timeout  65;
    #keepalive_requests指令用于设置一个keep-alive连接上可以服务的请求的最大数量；当最大请求数量达到时；连接被关闭。默认是100；对于QPS比较高的场景；建议最好加大这个参数。避免出现大量连接被生成再抛弃的情况；减少TIME_WAIT
    keepalive_requests 10000;
    #reset_timeout_connection nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间。默认不开启;可能会对keep-alive造成影响 
    #reset_timedout_connection on;

    #开启压缩
    gzip on;
    gzip_disable "msie6";
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.1;
    gzip_comp_level 3;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_types  any;
    gzip_vary on;
    

    server {
        listen       80;
        server_name  localhost;
        include conf.d/*.conf;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        location = /lua-version { 
            default_type 'text/plain';
	    content_by_lua ' 
        	if jit then 
                	ngx.say(jit.version) 
            	else 
                	ngx.say(_VERSION) 
        	end 
            '; 
        } 

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
